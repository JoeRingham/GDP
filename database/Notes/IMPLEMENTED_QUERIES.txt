IMPLEMENTED QUERIES
==============

<!!timestamp!!> : What format should timestamps be in?

~~~~~~~~~~~~~~~
filterConds:
* property names are the columns being filtered, their values are what they must equal
* if they are null, they are ignored (same as just not being included)
* if property is called time_range, it should be object with start and end properties
** These are then >= and <= values, used for time ranges on the specific column "start_time" (only filtering on when games start)
e.g. (1) >>>
{
	user_id : 1,
	game_id : null,
	time_range : {
		start : 10,
		end : 20
	}
}
===== WHERE user_id=1 AND start_time>=10 AND start_time<=20

e.g. (2) >>>
{
	game_id : 3,
	time_range : {
		start : null,
		end : 20
	}
}
===== WHERE game_id=3 AND start_time<=20
~~~~~~~~~~~~~~~

User
----
<USER_ENTRY> = id<int>, username<text>, dob<timestamp>, currency<int>, created<timestamp>, modified<timestamp>

createUser(pass, fail, userObj);
* Creates an entry in users table
* userObj = {
	username : "username",
	password : "password",
	dob : <!!timestamp!!>
}
* RETURNS: id (KEEP TRACK OF THIS)


readUserById(pass, fail, id);
* Takes an id integer to get a user entry
* RETURNS: <USER_ENTRY>


readUserByName(pass, fail, username);
* Takes a username to get a user entry
* RETURNS: <USER_ENTRY>


authenticateUser(pass, fail, username, givenpw);
* Takes a given username and password and verifies it against the database
* RETURNS: <USER_ENTRY>


updateUserDetails(pass, fail, updatedUserObj, id);
* Updates the entry matching the id with the values found in the updatedUserObj
* updatedUserObj = {
	username : "newusername",
	password : "newpassword",
	dob : <!!timestamp!!>,
	currency: 1000
}
* RETURNS: nothing


updateUserCurrency(pass, fail, newCurrency, id);
* Updates the entry matching the id with the newCurrency value
* RETURNS: nothing


deleteUser(pass, fail, id);
* Deletes the entry matching the id provided
* RETURNS: nothing



Sessions
--------
<SESSION_ENTRY> = id<int>, user_id<int>, start_time<timestamp>, !!end_time<timestamp|CAN BE NULL>!!,
							created<timestamp>, modified<timestamp>


createSession(pass, fail, sessionObj);
* Creates a session entry with given details
* sessionObj = {
	user_id: 1,
	start_time: <!!timestamp!!>
}
* RETURNS: id <!! KEEP HOLD OF THIS, YOU WILL NEED TO END SESSION !!>


readSessionById(pass, fail, id);
* Gets the session entry using the given id
* RETURNS: <SESSION_ENTRY>


endSession(pass, fail, end_time, id);
* Updates the session entry matching the id to have this new end_time value
* RETURNS: nothing


deleteSession(pass, fail, id);
* Deletes the entry matching the id provided
* RETURNS: nothing




Plays
-----
<PLAY_ENTRY> = id<int>, user_id<int>, game_id<text??>, start_time<timestamp>, end_time<timestamp>, score<int>, created<timestamp>


createPlay(pass, fail, playObj);
* Creates a play entry with given details
* playObj = {
	user_id: 1,
	game_id: "game1",
	start_time: <!!timestamp!!>,
	end_time: <!!timestamp!!>,
	score: 10000
}
* RETURNS: id


readPlayById(pass, fail, id);
* Gets the play entry using the given id
* RETURNS: <PLAY_ENTRY>


getScores(pass, fail, filterConds, orderBy, limit)
* Gets the scores depending on provided filters, order, and limits
* filterConds --> SEE ABOVE
* orderBy
** can be null
** ==> {
	column : <column_name to be ordered by>,
	direction : <DESC or ASC>
}
* limit ==> how many rows you want to retrieve
* RETURNS: [ <PLAY_ENTRY>, <PLAY_ENTRY>, ... ]


deletePlay(pass, fail, id);
* Deletes the entry matching the id provided
* RETURNS: nothing


User_Conditions
---------------
createUserCondition(pass, fail, condObj);
* Creates a user_condition entry with given details
* condObj = {
	user_id: 1,
	condition_id: "cond1",
	active: true/false
}
* RETURNS: id

readUserConditionById(pass, fail, id);
* Gets the user_condition entry using the given id
* RETURNS: id<int>, user_id<int>, condition_id<text??>, active<boolean>, created<timestamp>


!! getConditionsForUser(pass, fail, user_id);
* !! NOT IMPLEMENTED YET !!
* Will return a list of conditions that are currently active on the user matching the id given
* RETURNS: [ condition_id, condition_id, ... ]


deleteUserCondition(pass, fail, id);
* Deletes the entry matching the id provided
* RETURNS: nothing


User_Inventory
---------------
createUserInventory(pass, fail, inventoryObj);
* Creates a user_inventory entry with given details
* inventoryObj = {
	user_id: 1,
	item_id: "item1",
	active: true/false
}
* RETURNS: id

readUserInventoryById(pass, fail, id);
* Gets the user_inventory entry using the given id
* RETURNS: id<int>, user_id<int>, item_id<text??>, active<boolean>, created<timestamp>


!! getInventoryForUser(pass, fail, user_id);
* !! NOT IMPLEMENTED YET !!
* Will return a list of items that make up the inventory of the user matching the id given
* RETURNS: [ item_id, item_id, ... ]


deleteUserInventory(pass, fail, id);
* Deletes the entry matching the id provided
* RETURNS: nothing



User_Equipped
-------------
<EQUIPPED_ENTRY> = id<int>, user_id<int>, head<text??>, eyes<text??>, skin<text??>, top<text??>, created<timestamp>


createUserEquipped(pass, fail, inventoryObj);
* Creates a user_equipped entry with given details
* inventoryObj = {
	user_id: 1,
	head: "item1",
	eyes: "item2",
	skin: "item3",
	top: "item4",
}
* RETURNS: id


readUserEquippedById(pass, fail, id);
* Gets the user_equipped entry using the given id
* RETURNS: <EQUIPPED_ENTRY>


getEquippedForUser(pass, fail, user_id);
* Will return the latest equipped of the user matching the id given
* RETURNS: <EQUIPPED_ENTRY>


deleteUserInventory(pass, fail, id);
* Deletes the entry matching the id provided
* RETURNS: nothing

